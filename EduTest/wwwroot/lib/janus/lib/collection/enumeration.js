// Generated by CoffeeScript 1.12.2
(function() {
  var DerivedList, Enumeration, IndexList, KeyList, Map, Varying, _dynamic, deepGet, ref, traverse, traverseAll,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Varying = require('../core/varying').Varying;

  DerivedList = require('../collection/list').DerivedList;

  Map = require('./map').Map;

  ref = require('../util/util'), traverse = ref.traverse, traverseAll = ref.traverseAll, deepGet = ref.deepGet;

  KeyList = (function(superClass) {
    extend(KeyList, superClass);

    function KeyList(map1, options) {
      var ptr, ref1, ref2, scanMap;
      this.map = map1;
      if (options == null) {
        options = {};
      }
      KeyList.__super__.constructor.call(this);
      this.scope = (ref1 = options.scope) != null ? ref1 : 'all';
      this.include = (ref2 = options.include) != null ? ref2 : 'values';
      this._trackedKeys = {};
      scanMap = (function(_this) {
        return function(map) {
          return traverse(map.data, function(key) {
            return _this._addKey(key.join('.'));
          });
        };
      })(this);
      if (this.scope === 'all') {
        ptr = this.map;
        while (ptr != null) {
          scanMap(ptr);
          ptr = ptr._parent;
        }
      } else if (this.scope === 'direct') {
        scanMap(this.map);
      }
      this.listenTo(this.map, 'anyChanged', (function(_this) {
        return function(key, newValue, oldValue) {
          var ownValue;
          if (_this.scope === 'direct') {
            ownValue = deepGet(_this.map.data, key);
            if (ownValue !== newValue) {
              return;
            }
          }
          if ((newValue != null) && (oldValue == null)) {
            return _this._addKey(key);
          } else if ((oldValue != null) && (newValue == null)) {
            return _this._removeKey(key);
          }
        };
      })(this));
    }

    KeyList.prototype._addKey = function(key) {
      var i, j, parts, ref1, results;
      if (this._trackedKeys[key] === true) {
        return;
      }
      if (this.include === 'all') {
        parts = key.split('.');
        results = [];
        for (i = j = ref1 = parts.length; j > 0; i = j += -1) {
          key = parts.slice(0, i).join('.');
          if (this._trackedKeys[key] === true) {
            break;
          }
          this._trackedKeys[key] = true;
          results.push(this._add(key));
        }
        return results;
      } else {
        this._trackedKeys[key] = true;
        return this._add(key);
      }
    };

    KeyList.prototype._removeKey = function(key) {
      var idx, j, k, len, ref1;
      idx = this.list.indexOf(key);
      if (!(idx >= 0)) {
        return;
      }
      delete this._trackedKeys[key];
      this._removeAt(idx);
      if (this.include === 'all') {
        ref1 = this.list;
        for (idx = j = 0, len = ref1.length; j < len; idx = ++j) {
          k = ref1[idx];
          if (!(k.indexOf(key) === 0)) {
            continue;
          }
          delete this._trackedKeys[k];
          this._removeAt(idx);
        }
      }
      return null;
    };

    KeyList.prototype.mapPairs = function(f) {
      return this.flatMap((function(_this) {
        return function(key) {
          return Varying.mapAll(f, new Varying(key), _this.map.watch(key));
        };
      })(this));
    };

    KeyList.prototype.flatMapPairs = function(f) {
      return this.flatMap((function(_this) {
        return function(key) {
          return Varying.flatMapAll(f, new Varying(key), _this.map.watch(key));
        };
      })(this));
    };

    return KeyList;

  })(DerivedList);

  IndexList = (function(superClass) {
    extend(IndexList, superClass);

    function IndexList(parent) {
      this.parent = parent;
      IndexList.__super__.constructor.call(this);
      this._lengthVaried = this.parent.watchLength().react((function(_this) {
        return function(length) {
          var idx, j, l, ourLength, ref1, ref2, ref3, ref4, results, results1;
          ourLength = _this.length;
          if (length > ourLength) {
            results = [];
            for (idx = j = ref1 = ourLength, ref2 = length; ref1 <= ref2 ? j < ref2 : j > ref2; idx = ref1 <= ref2 ? ++j : --j) {
              results.push(_this._add(idx));
            }
            return results;
          } else if (length < ourLength) {
            results1 = [];
            for (idx = l = ref3 = ourLength, ref4 = length; l > ref4; idx = l += -1) {
              results1.push(_this._removeAt(idx - 1));
            }
            return results1;
          }
        };
      })(this));
    }

    IndexList.prototype.mapPairs = function(f) {
      return this.flatMap((function(_this) {
        return function(idx) {
          return Varying.mapAll(f, new Varying(idx), _this.parent.watchAt(idx));
        };
      })(this));
    };

    IndexList.prototype.flatMapPairs = function(f) {
      return this.flatMap((function(_this) {
        return function(idx) {
          return Varying.flatMapAll(f, new Varying(idx), _this.parent.watchAt(idx));
        };
      })(this));
    };

    IndexList.prototype._destroy = function() {
      return this._lengthVaried.stop();
    };

    return IndexList;

  })(DerivedList);

  _dynamic = function(f) {
    return function(obj, options) {
      return Enumeration[obj.isCollection === true ? 'list' : obj.isMap === true ? 'map' : void 0][f](obj, options);
    };
  };

  Enumeration = {
    get: _dynamic('get'),
    watch: _dynamic('watch'),
    map: {
      get: function(map, options) {
        var include, ptr, ref1, ref2, result, scanMap, scope, traverser;
        if (options == null) {
          options = {};
        }
        scope = (ref1 = options.scope) != null ? ref1 : 'all';
        include = (ref2 = options.include) != null ? ref2 : 'values';
        result = [];
        traverser = include === 'values' ? traverse : include === 'all' ? traverseAll : void 0;
        scanMap = (function(_this) {
          return function(map) {
            return traverser(map.data, function(key) {
              if (!(result.indexOf(key) >= 0)) {
                return result.push(key.join('.'));
              }
            });
          };
        })(this);
        if (scope === 'all') {
          ptr = map;
          while (ptr != null) {
            scanMap(ptr);
            ptr = ptr._parent;
          }
        } else if (scope === 'direct') {
          scanMap(map);
        }
        return result;
      },
      watch: function(map, options) {
        return new KeyList(map, options);
      }
    },
    list: {
      get: function(list) {
        var idx, j, ref1, results;
        results = [];
        for (idx = j = 0, ref1 = list.length; 0 <= ref1 ? j < ref1 : j > ref1; idx = 0 <= ref1 ? ++j : --j) {
          results.push(idx);
        }
        return results;
      },
      watch: function(list) {
        return new IndexList(list);
      }
    }
  };

  module.exports = {
    KeyList: KeyList,
    IndexList: IndexList,
    Enumeration: Enumeration
  };

}).call(this);
