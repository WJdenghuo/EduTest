// Generated by CoffeeScript 1.12.2
(function() {
  var DerivedList, UniqList,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  DerivedList = require('../list').DerivedList;

  UniqList = (function(superClass) {
    extend(UniqList, superClass);

    function UniqList(parent) {
      var elem, i, len, ref;
      this.parent = parent;
      UniqList.__super__.constructor.call(this);
      this.counts = [];
      ref = this.parent.list;
      for (i = 0, len = ref.length; i < len; i++) {
        elem = ref[i];
        this._tryAdd(elem);
      }
      this.parent.on('added', (function(_this) {
        return function(elem) {
          return _this._tryAdd(elem);
        };
      })(this));
      this.parent.on('removed', (function(_this) {
        return function(elem) {
          return _this._tryRemove(elem);
        };
      })(this));
    }

    UniqList.prototype._tryAdd = function(elem) {
      var idx;
      idx = this.list.indexOf(elem);
      if (idx >= 0) {
        return this.counts[idx] += 1;
      } else {
        this.counts[this.counts.length] = 1;
        return this._add(elem);
      }
    };

    UniqList.prototype._tryRemove = function(elem) {
      var idx;
      idx = this.list.indexOf(elem);
      if (idx >= 0) {
        this.counts[idx] -= 1;
        if (this.counts[idx] === 0) {
          this.counts.splice(idx, 1);
          return this._removeAt(idx);
        }
      }
    };

    return UniqList;

  })(DerivedList);

  module.exports = {
    UniqList: UniqList
  };

}).call(this);
