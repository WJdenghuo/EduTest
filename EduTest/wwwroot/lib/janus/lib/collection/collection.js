// Generated by CoffeeScript 1.12.2
(function() {
  var Base, Collection, Enumerable, Enumeration$, IndexOfFold, OrderedCollection, Traversal, Varying, folds,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  Base = require('../core/base').Base;

  Varying = require('../core/varying').Varying;

  Traversal = require('./traversal').Traversal;

  folds = require('./folds');

  IndexOfFold = require('./derived/indexof-fold').IndexOfFold;

  Enumeration$ = null;

  Enumerable = (function(superClass) {
    extend(Enumerable, superClass);

    function Enumerable() {
      return Enumerable.__super__.constructor.apply(this, arguments);
    }

    Enumerable.prototype.isEnumerable = true;

    Enumerable.prototype.enumerate = function(options) {
      return (Enumeration$ != null ? Enumeration$ : Enumeration$ = require('./enumeration').Enumeration).get(this, options);
    };

    Enumerable.prototype.enumeration = function(options) {
      if (Enumeration$ == null) {
        Enumeration$ = require('./enumeration').Enumeration;
      }
      if (options != null) {
        return Enumeration$.watch(this, options);
      } else {
        return (this.enumeration$ != null ? this.enumeration$ : this.enumeration$ = Base.managed((function(_this) {
          return function() {
            return Enumeration$.watch(_this);
          };
        })(this)))();
      }
    };

    Enumerable.prototype.serialize = function() {
      return Traversal.getNatural(this, Traversal["default"].serialize);
    };

    Enumerable.prototype.watchModified = function() {
      if (this._parent != null) {
        return this.watchDiff(this._parent);
      } else {
        return new Varying(false);
      }
    };

    Enumerable.prototype.watchDiff = function(other) {
      return Traversal.asList(this, Traversal["default"].diff, {
        other: other
      });
    };

    return Enumerable;

  })(Base);

  Collection = (function(superClass) {
    extend(Collection, superClass);

    function Collection() {
      return Collection.__super__.constructor.apply(this, arguments);
    }

    Collection.prototype.isCollection = true;

    Collection.prototype.filter = function(f) {
      return new (require('./derived/filtered-list').FilteredList)(this, f);
    };

    Collection.prototype.map = function(f) {
      return new (require('./derived/mapped-list').MappedList)(this, f);
    };

    Collection.prototype.flatMap = function(f) {
      return new (require('./derived/mapped-list').FlatMappedList)(this, f);
    };

    Collection.prototype.mapPairs = function(f) {
      return this.enumeration().mapPairs(f);
    };

    Collection.prototype.flatMapPairs = function(f) {
      return this.enumeration().flatMapPairs(f);
    };

    Collection.prototype.flatten = function() {
      return new (require('./derived/flattened-list').FlattenedList)(this);
    };

    Collection.prototype.uniq = function() {
      return new (require('./derived/uniq-list').UniqList)(this);
    };

    Collection.prototype.any = function(f) {
      return folds.any(new (require('./derived/mapped-list').FlatMappedList)(this, f));
    };

    Collection.prototype.fold = function(memo, f) {
      return folds.fold(this, memo, f);
    };

    Collection.prototype.scanl = function(memo, f) {
      return folds.scanl(this, memo, f);
    };

    Collection.prototype.foldl = function(memo, f) {
      return folds.foldl(this, memo, f);
    };

    Collection.prototype.min = function() {
      return folds.min(this);
    };

    Collection.prototype.max = function() {
      return folds.max(this);
    };

    Collection.prototype.sum = function() {
      return folds.sum(this);
    };

    Collection.prototype.indexOf = function(value) {
      return IndexOfFold.indexOf(this, value);
    };

    return Collection;

  })(Enumerable);

  OrderedCollection = (function(superClass) {
    extend(OrderedCollection, superClass);

    function OrderedCollection() {
      return OrderedCollection.__super__.constructor.apply(this, arguments);
    }

    OrderedCollection.prototype.isOrderedCollection = true;

    OrderedCollection.prototype.take = function(x) {
      return new (require('./derived/taken-list').TakenList)(this, x);
    };

    OrderedCollection.prototype.concat = function() {
      var lists;
      lists = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return new (require('./derived/catted-list').CattedList)([this].concat(lists));
    };

    OrderedCollection.prototype.join = function(joiner) {
      return folds.join(this, joiner);
    };

    return OrderedCollection;

  })(Collection);

  module.exports = {
    Enumerable: Enumerable,
    Collection: Collection,
    OrderedCollection: OrderedCollection
  };

}).call(this);
