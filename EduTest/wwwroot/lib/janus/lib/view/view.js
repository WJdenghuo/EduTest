// Generated by CoffeeScript 1.12.2
(function() {
  var Base, Varying, View, app, attribute, dynamic, isFunction, isString, match, ref, ref1, resolve, self, varying, watch,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Base = require('../core/base').Base;

  Varying = require('../core/varying').Varying;

  ref = require('../core/from')["default"], dynamic = ref.dynamic, watch = ref.watch, resolve = ref.resolve, attribute = ref.attribute, varying = ref.varying, app = ref.app, self = ref.self;

  match = require('../core/case').match;

  ref1 = require('../util/util'), isFunction = ref1.isFunction, isString = ref1.isString;

  View = (function(superClass) {
    extend(View, superClass);

    function View(subject, options) {
      this.options = options != null ? options : {};
      View.__super__.constructor.call(this);
      this.subject = this.constructor.viewModelClass != null ? new this.constructor.viewModelClass({
        view: this,
        options: this.options,
        subject: subject
      }, {
        app: this.options.app
      }) : subject;
      if (typeof this._initialize === "function") {
        this._initialize();
      }
    }

    View.prototype.artifact = function() {
      return this._artifact != null ? this._artifact : this._artifact = this._render();
    };

    View.prototype._render = function() {};

    View.point = match(dynamic(function(x, view) {
      if (isFunction(x)) {
        return Varying.ly(x(view.subject));
      } else if (isString(x) && (view.subject.resolve != null)) {
        return view.subject.resolve(x, view.options.app);
      } else {
        return Varying.ly(x);
      }
    }), watch(function(x, view) {
      return view.subject.watch(x);
    }), resolve(function(x, view) {
      return view.subject.resolve(x, view.options.app);
    }), attribute(function(x, view) {
      return new Varying(view.subject.attribute(x));
    }), varying(function(x, view) {
      if (isFunction(x)) {
        return Varying.ly(x(view.subject));
      } else {
        return Varying.ly(x);
      }
    }), app(function(x, view) {
      if (x != null) {
        return view.options.app.resolve(x);
      } else {
        return new Varying(view.options.app);
      }
    }), self(function(x, view) {
      if (isFunction(x)) {
        return Varying.ly(x(view));
      } else {
        return Varying.ly(view);
      }
    }));

    View.prototype.pointer = function() {
      return (function(_this) {
        return function(x) {
          return _this.constructor.point(x, _this);
        };
      })(this);
    };

    View.prototype.wireEvents = function() {
      if (!this._wired) {
        this._wireEvents();
      }
      this._wired = true;
      return null;
    };

    View.prototype._wireEvents = function() {};

    View.prototype.attach = function(artifact) {
      this._artifact = artifact;
      this._attach(artifact);
      return null;
    };

    View.prototype._attach = function() {};

    return View;

  })(Base);

  module.exports = {
    View: View
  };

}).call(this);
