// Generated by CoffeeScript 1.12.2
(function() {
  var App, Base, Endpoint, EndpointResponse, ForbiddenResponse, InternalErrorResponse, InvalidRequestResponse, NotFoundResponse, OkResponse, StoreManifest, UnauthorizedResponse, types,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  types = require('../util/types');

  Base = require('../core/base').Base;

  App = require('./app').App;

  StoreManifest = require('./manifest').StoreManifest;

  EndpointResponse = (function() {
    function EndpointResponse(content) {
      this.content = content;
    }

    return EndpointResponse;

  })();

  OkResponse = (function(superClass) {
    extend(OkResponse, superClass);

    function OkResponse() {
      return OkResponse.__super__.constructor.apply(this, arguments);
    }

    OkResponse.prototype.httpCode = 200;

    return OkResponse;

  })(EndpointResponse);

  InvalidRequestResponse = (function(superClass) {
    extend(InvalidRequestResponse, superClass);

    function InvalidRequestResponse() {
      return InvalidRequestResponse.__super__.constructor.apply(this, arguments);
    }

    InvalidRequestResponse.prototype.httpCode = 400;

    return InvalidRequestResponse;

  })(EndpointResponse);

  UnauthorizedResponse = (function(superClass) {
    extend(UnauthorizedResponse, superClass);

    function UnauthorizedResponse() {
      return UnauthorizedResponse.__super__.constructor.apply(this, arguments);
    }

    UnauthorizedResponse.prototype.httpCode = 401;

    return UnauthorizedResponse;

  })(EndpointResponse);

  ForbiddenResponse = (function(superClass) {
    extend(ForbiddenResponse, superClass);

    function ForbiddenResponse() {
      return ForbiddenResponse.__super__.constructor.apply(this, arguments);
    }

    ForbiddenResponse.prototype.httpCode = 403;

    return ForbiddenResponse;

  })(EndpointResponse);

  NotFoundResponse = (function(superClass) {
    extend(NotFoundResponse, superClass);

    function NotFoundResponse() {
      return NotFoundResponse.__super__.constructor.apply(this, arguments);
    }

    NotFoundResponse.prototype.httpCode = 404;

    return NotFoundResponse;

  })(EndpointResponse);

  InternalErrorResponse = (function(superClass) {
    extend(InternalErrorResponse, superClass);

    function InternalErrorResponse() {
      return InternalErrorResponse.__super__.constructor.apply(this, arguments);
    }

    InternalErrorResponse.prototype.httpCode = 500;

    return InternalErrorResponse;

  })(EndpointResponse);

  Endpoint = (function(superClass) {
    extend(Endpoint, superClass);

    function Endpoint(pageModelClass1, pageLibrary1, app1) {
      this.pageModelClass = pageModelClass1;
      this.pageLibrary = pageLibrary1;
      this.app = app1;
      Endpoint.__super__.constructor.call(this);
    }

    Endpoint.prototype.handle = function(env, respond) {
      var app, dom, manifest, pageModel, pageView;
      app = this.initApp(env);
      manifest = new StoreManifest(app);
      manifest.on('allComplete', (function(_this) {
        return function() {
          return _this.finish(pageModel, pageView, manifest, respond);
        };
      })(this));
      manifest.on('requestComplete', (function(_this) {
        return function(request) {
          if (types.result.failure.match(request.value) && request.options.fatal === true) {
            return _this.error(request, respond);
          }
        };
      })(this));
      pageModel = this.initPageModel(env, app, respond);
      pageView = this.pageLibrary.get(pageModel, {
        context: env.context,
        options: {
          app: app
        }
      });
      dom = this.initPageView(pageView, env);
      pageModel.resolve();
      return dom;
    };

    Endpoint.prototype.initApp = function(env) {
      return this.app.shadow();
    };

    Endpoint.prototype.initPageModel = function(env, app, respond) {
      return new this.pageModelClass({
        env: env
      }, {
        app: app
      });
    };

    Endpoint.prototype.initPageView = function(pageView, env) {
      return pageView.artifact();
    };

    Endpoint.prototype.finish = function(pageModel, pageView, manifest, respond) {
      return respond(new OkResponse(pageView.markup()));
    };

    Endpoint.prototype.error = function(request, respond) {
      return respond(new InternalErrorResponse());
    };

    Endpoint.factoryWith = function(pageLibrary, app) {
      var self;
      self = this;
      return function(pageModelClass) {
        return new self(pageModelClass, pageLibrary, app);
      };
    };

    return Endpoint;

  })(Base);

  module.exports = {
    Endpoint: Endpoint,
    responses: {
      EndpointResponse: EndpointResponse,
      OkResponse: OkResponse,
      InvalidRequestResponse: InvalidRequestResponse,
      UnauthorizedResponse: UnauthorizedResponse,
      ForbiddenResponse: ForbiddenResponse,
      NotFoundResponse: NotFoundResponse,
      InternalErrorResponse: InternalErrorResponse
    }
  };

}).call(this);
