// Generated by CoffeeScript 1.12.2
(function() {
  var Base, Manifest, Request, StoreManifest, types,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  types = require('../util/types');

  Base = require('../core/base').Base;

  Request = require('../model/store').Request;

  Manifest = (function(superClass) {
    extend(Manifest, superClass);

    function Manifest() {
      Manifest.__super__.constructor.call(this);
      this._requestCount = 0;
      this.requests = [];
      this.objects = [];
      this._setHook();
    }

    Manifest.prototype.requested = function(request) {
      var handleChange;
      this._requestCount += 1;
      this.requests.push(request);
      this.emit('requestStart', request);
      handleChange = (function(_this) {
        return function(state) {
          if (types.result.success.match(state) || types.result.failure.match(state)) {
            types.result.success.match(state, function(x) {
              return _this.objects.push(x);
            });
            _this.emit('requestComplete', request, state.value);
            _this._requestCount -= 1;
            return _this._setHook();
          }
        };
      })(this);
      request.on('changed', handleChange);
      handleChange(request.value);
      return null;
    };

    Manifest.prototype._setHook = function() {
      if (this._hookSet === true) {
        return;
      }
      this._hookSet = true;
      return setTimeout(((function(_this) {
        return function() {
          _this._hookSet = false;
          if (_this._requestCount === 0) {
            return _this.emit('allComplete');
          }
        };
      })(this)), 0);
    };

    return Manifest;

  })(Base);

  StoreManifest = (function(superClass) {
    extend(StoreManifest, superClass);

    function StoreManifest(app) {
      this.app = app;
      StoreManifest.__super__.constructor.call(this);
      this.listenTo(this.app, 'vended', (function(_this) {
        return function(type, store) {
          if (type === 'stores') {
            return store.on('requesting', function(request) {
              return _this.requested(request);
            });
          }
        };
      })(this));
    }

    return StoreManifest;

  })(Manifest);

  module.exports = {
    Manifest: Manifest,
    StoreManifest: StoreManifest
  };

}).call(this);
