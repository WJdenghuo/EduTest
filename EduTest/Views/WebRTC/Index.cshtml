@model RTCUser
@{
    Layout = null;
}

<!DOCTYPE html>

<html>

<head>
    <meta name="viewport" content="width=device-width" />
    <script src="~/lib/signalr/dist/browser/signalr.js"></script>
    <script src="https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js"></script>
    @*<script src="https://cdn.bootcss.com/socket.io/2.2.0/socket.io.js"></script>*@
    <script src="https://cdn.bootcss.com/adapterjs/0.15.4/adapter.min.js"></script>
    <script src="https://cdn.bootcss.com/adapterjs/0.15.4/adapter.screenshare.min.js"></script>
    <title>local</title>
</head>
<body>
    <video id="local_video" autoplay playsinline width="400" height="400"></video>
    <video id="remote_video" autoplay playsinline width="400" height="400"></video>
    @Html.DropDownListFor(x => x.UserName, Model.Enumerator)
    <button id="showVideo">开始</button>
    <div id="errorMsg"></div>

    <strong>示例：</strong>
    <a href="@Url.Action("Init","WebRTC")" target="_blank">local</a>
    <a href="@Url.Action("ResponseInit","WebRTC")" target="_blank">remote</a>
    <a href="@Url.Action("SimpleWebRTC","WebRTC")" target="_blank">SimpleWebRTC</a>
    <a href="@Url.Action("Index2","WebRTC")" target="_blank">Index2</a>
    @*<object></object>
    <embed id="rtmp-streamer" src="~/lib/rtmp-streamer/RtmpStreamer.swf" bgcolor="#999999" quality="high" width="320" height="240" allowScriptAccess="sameDomain" type="application/x-shockwave-flash"/>*@
    <script id="showVideo">
        var ice = {
            "iceServers": [
                { "url": "stun:www.385073012.cn:3478" },
                { "urls": "turn:www.385073012.cn:3478", "username": "cnki", "credential": "123456" }
            ]/*, "sdpSemantics": 'plan-b'*/
        };
        var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();;

        $(function () {
            //document.querySelector('#showVideo').addEventListener('click', e => init(e));
            document.querySelector('#showVideo').addEventListener('click', e => rtcInit(e));
            //document.querySelector('#showVideo').addEventListener('click', function () { signalrInit("SendMessage","test","hello")});

            //require(["rtmp-streamer"], function (RtmpStreamer) {
            //    var streamer = new RtmpStreamer(document.getElementById('rtmp-streamer'));
            //    streamer.publish(url, window.stream);
            //});
        })
        var constraints = window.constraints = {
            audio: false,
            video: {
                frameRate: { ideal: 10, max: 15 }
            }
        };

        function handleSuccess(stream) {
            var video = document.querySelector('#local_video');
            var videoTracks = stream.getVideoTracks();
            console.log('Got stream with constraints:', constraints);
            console.log(`Using video device: ${videoTracks[0].label}`);
            window.stream = stream; // make variable available to browser console
            video.srcObject = stream;
        }

        function handleError(error) {

            if (error.name === 'ConstraintNotSatisfiedError') {
                let v = constraints.video;
                errorMsg(`The resolution ${v.width.exact}x${v.height.exact} px is not supported by your device.`);
            } else if (error.name === 'PermissionDeniedError') {
                errorMsg('Permissions have not been granted to use your camera and ' +
                    'microphone, you need to allow the page access to your devices in ' +
                    'order for the demo to work.');
            }
            errorMsg(`getUserMedia error: ${error.name}`, error);
        }

        function errorMsg(msg, error) {
            var errorElement = document.querySelector('#errorMsg');
            errorElement.innerHTML += `<p>${msg}</p>`;
            if (typeof error !== 'undefined') {
                console.log(error);
            }
        }


        function logError() { }

        /*
        *  ********************初始化信令**************************
        */
        async function start() {
            try {
                await connection.start();
                console.log(connection.connectionState);
            } catch (err) {
                console.log(err);
                setTimeout(() => start(), 5000);
            }
        };

        connection.onclose(async () => {
            await start();
        });
        async function signalrInit(eventName, value, message) {

            //connection.start().catch(err => console.error(err.toString()));
            await start();

            var timer;
            var count = 0;
            function myfunction() {
                console.log(connection.connectionState);

                count++;
                if (count > 3) {
                    window.clearInterval(timer);
                    count = 0;
                }

                if (connection.connectionState) {

                    connection.invoke(eventName, value, message).catch(function (err) {
                        console.error("如果房间内第一个用户进入发生该错误，请不要在意，服务端为Clients.Others.SendAsync（），因为该房间内没有其他用户，所以服务端会发生错误；");
                        return console.error(err.toString());
                    });
                    window.clearInterval(timer);
                }
            }
            timer = window.setInterval(myfunction, 1000);

        }
        async function sendMessage(eventName, value, message) {
            if (connection.connectionState) {
                connection.invoke(eventName, value, message).catch(function (err) {
                    return console.error(err.toString());
                });
            }
            else {
                await signalrInit(eventName, value, message);
            }
        }

        /*
        *  ********************RTCPeerConnection**************************
        */
        async function rtcInit(e) {
            try {
                await signalrInit();
                var pc = new RTCPeerConnection(ice);

                var stream = await navigator.mediaDevices.getUserMedia(constraints);
                pc.addStream(stream);

                handleSuccess(stream);

                //收集本地媒体消息
                pc.createOffer(async function (offer) {

                    pc.setLocalDescription(offer);
                    //console.log("local sdp:" + offer.sdp);
                    //console.log("signalr连接状态："+connection.connectionState);
                    //connection.invoke("SendMessage", $("#UserName").val(), offer.sdp).catch(function (err) {
                    //    return console.error(err.toString());
                    //});
                    await sendMessage("SendMessage", $("#UserName").val(), offer);
                }, function (error) { console.log(error); });

                pc.oniceconnectionstatechange = (evt) => {
                    console.log('ICE connection state change: ' + evt.target.iceConnectionState);
                };
                pc.onicecandidate = async function (evt) {

                    if (evt.target.iceGatheringState == "complete") {
                        pc.createOffer(async function (offer) {
                            pc.setLocalDescription(offer);
                            await sendMessage("SendMessage", $("#UserName").val(), offer);
                        }, function (error) { console.log(error); });
                    }
                    if (evt.candidate) {
                        await sendMessage("SendMessage", $("#UserName").val(), evt.candidate);
                    }
                }

                //收集远端sdp，IceCandidate
                connection.on("ReceiveMessage", async function (user, message) {

                    console.log(message);
                    if (message.candidate) {
                        pc.addIceCandidate(message);
                    }
                    if (message.type == "offer") {

                        /*
                         * 信令控制中很重要的一步就是，当远端发生变化是，通过信令消息通知其他客户端 new RTCPeerConnection
                         * 重新获取ice候选人，检测新的远端媒体流
                         */

                        pc = new RTCPeerConnection(ice);
                        pc.setRemoteDescription(message);

                        pc.createAnswer(async function (answer) {
                            pc.setLocalDescription(answer);
                            await sendMessage("SendMessage", $("#UserName").val(), answer);
                        }, function (error) { console.log(error); });

                        pc.onicecandidate = async function (evt) {

                            if (evt.candidate) {
                                await sendMessage("SendMessage", $("#UserName").val(), evt.candidate);
                                //connection.invoke("SendMessage", $("#UserName").val(), evt.candidate).catch(function (err) {
                                //    return console.error(err.toString());
                                //});
                            }
                        }

                        pc.onaddstream = function (evt) {

                            //var remote_video = document.getElementById('remote_video');
                            //remote_video.src = window.URL.createObjectURL(evt.stream);
                            var remotevideo = document.querySelector('#remote_video');
                            var videoTracks = evt.stream.getVideoTracks();
                            console.log('Got remote stream with constraints:', constraints);
                            console.log(`Using remote video device: ${videoTracks[0].label}`);
                            remotevideo.srcObject = evt.stream;
                            window.stream2 = evt.stream;
                            //remotevideo.src = window.URL.createObjectURL(evt.stream);
                        }
                    }
                    if (message.type == "answer") {
                        pc.setRemoteDescription(message);
                    }
                });

                pc.onaddstream = function (evt) {

                    var remotevideo = document.querySelector('#remote_video');
                    remotevideo.srcObject = evt.stream;
                    //remotevideo.src = window.URL.createObjectURL(evt.stream);
                }

                e.target.disabled = true;
            } catch (e) {
                console.log(e);
                //handleError(e);
            }
        }
    </script>
</body>
</html>
