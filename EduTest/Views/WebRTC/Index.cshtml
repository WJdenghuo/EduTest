
@{
    Layout = null;
}

<!DOCTYPE html>

<html>

<head>
    <meta name="viewport" content="width=device-width" />
    <script src="~/lib/signalr/dist/browser/signalr.js"></script>
    <script src="https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js"></script>
    @*<script src="https://cdn.bootcss.com/socket.io/2.2.0/socket.io.js"></script>*@
    <script src="https://cdn.bootcss.com/adapterjs/0.15.4/adapter.min.js"></script>
    <script src="https://cdn.bootcss.com/adapterjs/0.15.4/adapter.screenshare.min.js"></script>
    <title>Index</title>
</head>
<body>
    <video id="local_video"></video>
    <video id="remote_video"></video>
    <button id="showVideo">开始</button>
    <div id="errorMsg"></div>
    <script id="showVideo">
        var ice = {
            "iceServers": [
                { "url": "stun:62.234.105.58:3478" },
                { "url": "turn:62.234.105.58:3478", "username": "cnki", "credential": "123456" }
            ]
        };
        var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();
        $(function () {
            document.querySelector('#showVideo').addEventListener('click', e => init(e));
            //var signalingChannel = new SignalingChannel();
            //var pc = new RTCPeerConnection(ice);

            //navigator.getUserMedia({ "audio": true, "video": true }, gotStream, logError);

            //function gotStream(evt) {
            //    debugger;
            //    pc.addStream(evt.stream);

            //    var local_video = document.getElementById('local_video');
            //    local_video.src = window.URL.createObjectURL(evt.stream);

            //    pc.createOffer(function (offer) {
            //        pc.setLocalDescription(offer);
            //        //signalingChannel.send(offer.sdp);
            //    });
            //}

            //pc.onicecandidate = function (evt) {
            //    if (evt.candidate) {
            //        signalingChannel.send(evt.candidate);
            //    }
            //}

            //signalingChannel.onmessage = function (msg) {
            //    if (msg.candidate) {
            //        pc.addIceCandidate(msg.candidate);
            //    }
            //}

            //pc.onaddstream = function (evt) {
            //    var remote_video = document.getElementById('remote_video');
            //    remote_video.src = window.URL.createObjectURL(evt.stream);
            //}

            //function logError() { }

            connection.on("ReceiveMessage", function (user, message) {
                console.log(user + ":" + message);
            });
            connection.start().catch(err => console.error(err.toString()));
            
            window.setTimeout(sendTest, 2000)
            function sendTest() {
                console.log(connection.connectionState);
                connection.invoke("SendMessage", "test", "hello!").catch(function (err) {
                    return console.error(err.toString());
                });
            }
        })
        const constraints = window.constraints = {
            audio: false,
            video: true
        };

        function handleSuccess(stream) {
            const video = document.querySelector('#local_video');
            const videoTracks = stream.getVideoTracks();
            console.log('Got stream with constraints:', constraints);
            console.log(`Using video device: ${videoTracks[0].label}`);
            window.stream = stream; // make variable available to browser console
            video.srcObject = stream;
        }

        function handleError(error) {
            if (error.name === 'ConstraintNotSatisfiedError') {
                let v = constraints.video;
                errorMsg(`The resolution ${v.width.exact}x${v.height.exact} px is not supported by your device.`);
            } else if (error.name === 'PermissionDeniedError') {
                errorMsg('Permissions have not been granted to use your camera and ' +
                    'microphone, you need to allow the page access to your devices in ' +
                    'order for the demo to work.');
            }
            errorMsg(`getUserMedia error: ${error.name}`, error);
        }

        function errorMsg(msg, error) {
            const errorElement = document.querySelector('#errorMsg');
            errorElement.innerHTML += `<p>${msg}</p>`;
            if (typeof error !== 'undefined') {
                console.error(error);
            }
        }

        async function init(e) {
            try {
                const stream = await navigator.mediaDevices.getUserMedia(constraints);
                handleSuccess(stream);
                e.target.disabled = true;
            } catch (e) {
                handleError(e);
            }
        }
    </script>
</body>
</html>
