
@{
    Layout = null;
}

<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>MQTT+Media</title>
    @*<script src="~/lib/paho-mqtt/paho-mqtt-min.js"></script>*@
    <script src="https://cdnjs.cloudflare.com/ajax/libs/paho-mqtt/1.0.1/mqttws31.min.js" type="text/javascript"></script>
    <script>
        var constraints = window.constraints = {
            audio: false,
            video: {
                width: 160,
                height: 120,
                frameRate: { ideal: 10, max: 15 }
            }
        };

        var video = document.getElementById('local');
        var canvas = document.getElementById('canvas');
        var photo = document.getElementById('photo');

        var hostname = '62.234.105.58', //'192.168.1.2','106.13.116.83'
            port = 15675,//8083
            clientId = 'client-mao2080',
            timeout = 5,
            keepAlive = 100,
            cleanSession = false,
            ssl = false,
            userName = 'admin',
            password = 'admin',
            topic = '/hello1';
        client = new Paho.MQTT.Client(hostname, port,"/ws", clientId);

        //建立客户端实例
        var options = {
            invocationContext: {
                host: hostname,
                port: port,
                path: client.path,
                clientId: clientId
            },
            timeout: timeout,
            keepAliveInterval: keepAlive,
            cleanSession: cleanSession,
            useSSL: ssl,
            userName: userName,
            password: password,
            onSuccess: onConnect,
            onFailure: function (e) {
                console.log(e);
                s = "{time:" + new Date().Format("yyyy-MM-dd hh:mm:ss") + ", onFailure()}";
                console.log(s);
            }
        };
        client.connect(options);
        //连接服务器并注册连接成功处理事件
        function onConnect() {
            console.log("onConnected");
            s = "{time:" + new Date().Format("yyyy-MM-dd hh:mm:ss") + ", onConnected()}";
            console.log(s);
            client.subscribe(topic);
        }

        client.onConnectionLost = onConnectionLost;

        //注册连接断开处理事件
        client.onMessageArrived = onMessageArrived;

        //注册消息接收处理事件
        function onConnectionLost(responseObject) {
            //console.log(responseObject);
            s = "{time:" + new Date().Format("yyyy-MM-dd hh:mm:ss") + ", onConnectionLost()}";
            console.log(s);
            if (responseObject.errorCode !== 0) {
                console.log("onConnectionLost:" + responseObject.errorMessage);
                console.log("连接已断开");
            }
        }

        function onMessageArrived(message) {
            s = "{time:" + new Date().Format("yyyy-MM-dd hh:mm:ss") + ", onMessageArrived()}";

            console.log(s);

            var meidaMessage =  JSON.parse(message.payloadString);

            if (meidaMessage.type == "string") {
                console.log("收到消息:" + message.payloadString);
            }
            else if (meidaMessage.type == "media-base64") {
                var photo = document.getElementById('photo');
                photo.setAttribute('src', meidaMessage.content);
            }


        }

        function send() {
            var s = document.getElementById("msg").value;
            if (s) {
                
                s = {
                    "time": new Date().Format("yyyy-MM-dd hh:mm:ss"),
                    "type": "string",
                    "content": s,
                    "from": "web console"
                };
                message = new Paho.MQTT.Message(JSON.stringify(s));
                message.destinationName = topic;
                client.send(message);
                document.getElementById("msg").value = "";
            }
        }
        function getMediaSream() {

            navigator.mediaDevices.getUserMedia(constraints)
                .then(function (mediaStream) {
                    window.stream = mediaStream;
                    var video = document.querySelector('#local');
                    video.srcObject = mediaStream;
                    video.onloadedmetadata = function (e) {
                        video.play();
                    };
                })
                .catch(function (err) { console.log(err.name + ": " + err.message); }); // 总是在最后检查错误
        }

        function sendStream() {
            if (window.stream) {
                var video = document.getElementById('local');
                var canvas = document.getElementById('canvas');
                var photo = document.getElementById('photo');

                var context = canvas.getContext('2d');
                canvas.width = video.videoWidth;
                canvas.height = video.videoHeight;
                context.drawImage(video, 0, 0, video.videoWidth, video.videoHeight);
                var data = canvas.toDataURL('image/png', 0.3);
                //photo.setAttribute('src', data);
                if (data) {
                    // var s = "{time:" + new Date().Format("yyyy-MM-dd hh:mm:ss") + ",type:media, content:" + (data) + ", from: web console}";
                    var s = {
                        "time": new Date().Format("yyyy-MM-dd hh:mm:ss"),
                        "type": "media-base64",
                        "content": data,
                        "from": "web console"
                    }
                    message = new Paho.MQTT.Message(JSON.stringify(s));
                    message.destinationName = topic;
                    client.send(message);
                }
            }
        }

        var count = 0;

        function start() {
            window.tester = window.setInterval(function () {
                if (client.isConnected) {
                    var s = "{time:" + new Date().Format("yyyy-MM-dd hh:mm:ss") + ", content:" + (count++) +
                        ", from: web console}";
                    message = new Paho.MQTT.Message(s);
                    message.destinationName = topic;
                    client.send(message);
                }
            }, 1000);
        }

        function stop() {
            window.clearInterval(window.tester);
        }

        Date.prototype.Format = function (fmt) { //author: meizz
            var o = {
                "M+": this.getMonth() + 1, //月份
                "d+": this.getDate(), //日
                "h+": this.getHours(), //小时
                "m+": this.getMinutes(), //分
                "s+": this.getSeconds(), //秒
                "q+": Math.floor((this.getMonth() + 3) / 3), //季度
                "S": this.getMilliseconds() //毫秒
            };
            if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
            for (var k in o)
                if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[
                    k]) : (("00" + o[k]).substr(("" + o[k]).length)));
            return fmt;
        }
    </script>
</head>

<body>
    <input type="text" id="msg" />
    <input type="button" value="Send" onclick="send()" />
    <input type="button" value="Start" onclick="start()" />
    <input type="button" value="Stop" onclick="stop()" />
    <input type="button" value="SendMedia" onclick="sendStream()" />
    <input type="button" value="getMediaSream" onclick="getMediaSream()" />
    <video id="local" autoplay></video>
    <canvas id="canvas" style="display: none;"></canvas>
    <div class="output">
        <img id="photo" alt="The screen capture will appear in this box.">
    </div>
</body>

</html>
